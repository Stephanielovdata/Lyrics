# Plot simulated data
x.plot <- seq(4,20,by=.01)
x <- sim.data.train$data.train$x
y <- sim.data.train$data.train$y
plot(x,y,main="Simulated Data")
# Plot f(x)
lines(x.plot,true.f(x.plot),lwd=2,col="red")
# Plot test cases
y.test <- sim.data.train$y.test
abline(v=x.test,col="grey")
points(x.test,y.test,pch=20,cex=1.5,col="blue")
# Legend
legend("topleft",legend=c("f(x)","Test cases"),fill=c("red","blue"),cex=.5)
predict.test.case <- function(degree,
data,
x.test) {
# Train model
model <- lm(y~poly(x,degree=degree),data=data)
# Predict test cases
y.test.hat <- predict(model,newdata=data.frame(x=x.test))
# Return y test case
return(y.test.hat)
}
x.plot <- seq(4,20,by=.01)
x.test <- c(10,16)
# Predict for degree=1
y.pred.1 <- predict.test.case(degree=1,
data=sim.data.train$data.train,
x.test=x.test)
y.plot.1 <- predict.test.case(degree=1,
data=sim.data.train$data.train,
x.test=x.plot)
# Predict for degree=2
y.pred.2 <- predict.test.case(degree=2,
data=sim.data.train$data.train,
x.test=x.test)
y.plot.2 <- predict.test.case(degree=2,
data=sim.data.train$data.train,
x.test=x.plot)
# Predict for degree=3
y.pred.3 <- predict.test.case(degree=3,
data=sim.data.train$data.train,
x.test=x.test)
y.plot.3 <- predict.test.case(degree=3,
data=sim.data.train$data.train,
x.test=x.plot)
# Plot simulated data
x <- sim.data.train$data.train$x
y <- sim.data.train$data.train$y
plot(x,y,main="Simulated Data")
abline(h=0,lty=2)
# Plot f(x)
lines(x.plot,true.f(x.plot),lwd=1.5,col="red")
# Plot the estimated curves
lines(x.plot,y.plot.1,lwd=1.5,col="green")
lines(x.plot,y.plot.2,lwd=1.5,col="purple")
lines(x.plot,y.plot.3,lwd=1.5,col="orange")
# Plot test cases
y.test <- sim.data.train$y.test
abline(v=x.test,col="grey")
points(x.test,y.test,pch=20,cex=1.5,col="blue")
# Plot estimated test cases
points(x.test,y.pred.1,pch=20,cex=1.5,col="green")
points(x.test,y.pred.2,pch=20,cex=1.5,col="purple")
points(x.test,y.pred.3,pch=20,cex=1.5,col="orange")
# Legend
legend("topleft",
legend=c("f(x)","Test Case","Degree 1","Degree 2","Degree 3"),
fill=c("red","blue","green","purple","orange"),
cex=.5)
poly.predict <- function(degree.vec,
data,
x.test) {
# Vectorize predict.test.case()
pred <- sapply(degree.vec,
predict.test.case,
data=data,
x.test=x.test)
# Name rows and columns
rownames(pred)  <- paste("TestCase",1:length(x.test),sep="")
colnames(pred)  <- paste("D",degree.vec,sep="")
# Return
return(pred)
}
# Test function poly.predict()
x.test <- c(10,16)
poly.predict(degree.vec=1:4,
data=sim.data.train$data.train,
x.test=x.test)
#mat.pred.1
#mat.pred.2
#y.test.mat
# Simulate data
for (i in 1:1000) {
set.seed(1)
x.test <- c(10,16)
sim.data.train <- sim.training(x.test=x.test)
poly.predict(degree.vec=1:5,
data=sim.data.train$data.train,
x.test=x.test)
}
# Solution goes here -----------
# MSE
MSE(y_pred = c(mat.pred.1, mat.pred.2), y_true = true.f(x.text))
true.f <- function(x) {
f.out <- (x-5)*(x-12)
return(f.out)
}
true.f(16)
sim.training <- function(x.test=c(16)
) {
# Hard-coded sample size and standard deviation
n <- 20
sd.error <- 20
# Training x vector
x <- seq(4,20,length=n)
# Simulate training Y based on f(x) and normal error
y <- true.f(x)+rnorm(n,sd=sd.error)
# Simulate test case
y.test <- true.f(x.test)+rnorm(length(x.test),sd=sd.error)
# Return a list of two entries:
# 1) the dataframe data.train
# 2) test respone vector y_0
return(list(data.train=data.frame(x=x,y=y),
y.test=y.test))
}
# Simulate data
set.seed(1)
x.test <- c(10,16)
sim.data.train <- sim.training(x.test=x.test)
head(sim.data.train$data.train,4)
sim.data.train$y.test
# Plot simulated data
x.plot <- seq(4,20,by=.01)
x <- sim.data.train$data.train$x
y <- sim.data.train$data.train$y
plot(x,y,main="Simulated Data")
# Plot f(x)
lines(x.plot,true.f(x.plot),lwd=2,col="red")
# Plot test cases
y.test <- sim.data.train$y.test
abline(v=x.test,col="grey")
points(x.test,y.test,pch=20,cex=1.5,col="blue")
# Legend
legend("topleft",legend=c("f(x)","Test cases"),fill=c("red","blue"),cex=.5)
predict.test.case <- function(degree,
data,
x.test) {
# Train model
model <- lm(y~poly(x,degree=degree),data=data)
# Predict test cases
y.test.hat <- predict(model,newdata=data.frame(x=x.test))
# Return y test case
return(y.test.hat)
}
x.plot <- seq(4,20,by=.01)
x.test <- c(10,16)
# Predict for degree=1
y.pred.1 <- predict.test.case(degree=1,
data=sim.data.train$data.train,
x.test=x.test)
y.plot.1 <- predict.test.case(degree=1,
data=sim.data.train$data.train,
x.test=x.plot)
# Predict for degree=2
y.pred.2 <- predict.test.case(degree=2,
data=sim.data.train$data.train,
x.test=x.test)
y.plot.2 <- predict.test.case(degree=2,
data=sim.data.train$data.train,
x.test=x.plot)
# Predict for degree=3
y.pred.3 <- predict.test.case(degree=3,
data=sim.data.train$data.train,
x.test=x.test)
y.plot.3 <- predict.test.case(degree=3,
data=sim.data.train$data.train,
x.test=x.plot)
# Plot simulated data
x <- sim.data.train$data.train$x
y <- sim.data.train$data.train$y
plot(x,y,main="Simulated Data")
abline(h=0,lty=2)
# Plot f(x)
lines(x.plot,true.f(x.plot),lwd=1.5,col="red")
# Plot the estimated curves
lines(x.plot,y.plot.1,lwd=1.5,col="green")
lines(x.plot,y.plot.2,lwd=1.5,col="purple")
lines(x.plot,y.plot.3,lwd=1.5,col="orange")
# Plot test cases
y.test <- sim.data.train$y.test
abline(v=x.test,col="grey")
points(x.test,y.test,pch=20,cex=1.5,col="blue")
# Plot estimated test cases
points(x.test,y.pred.1,pch=20,cex=1.5,col="green")
points(x.test,y.pred.2,pch=20,cex=1.5,col="purple")
points(x.test,y.pred.3,pch=20,cex=1.5,col="orange")
# Legend
legend("topleft",
legend=c("f(x)","Test Case","Degree 1","Degree 2","Degree 3"),
fill=c("red","blue","green","purple","orange"),
cex=.5)
poly.predict <- function(degree.vec,
data,
x.test) {
# Vectorize predict.test.case()
pred <- sapply(degree.vec,
predict.test.case,
data=data,
x.test=x.test)
# Name rows and columns
rownames(pred)  <- paste("TestCase",1:length(x.test),sep="")
colnames(pred)  <- paste("D",degree.vec,sep="")
# Return
return(pred)
}
# Test function poly.predict()
x.test <- c(10,16)
poly.predict(degree.vec=1:4,
data=sim.data.train$data.train,
x.test=x.test)
#mat.pred.1
#mat.pred.2
#y.test.mat
# Simulate data
for (i in 1:1000) {
set.seed(1)
x.test <- c(10,16)
sim.data.train <- sim.training(x.test=x.test)
poly.predict(degree.vec=1:5,
data=sim.data.train$data.train,
x.test=x.test)
}
# Solution goes here -----------
# MSE
# Solution goes here -----------
for (i in 1:1000) {
set.seed(1)
x.test <- c(10,16)
sim.data.train <- sim.training(x.test=x.test)
pred <- poly.predict(degree.vec=1:5,
data=sim.data.train$data.train,
x.test=x.test)
}
pred
# Simulate data
for (i in 1:1000) {
set.seed(1)
x.test <- c(10,16)
sim.data.train <- sim.data.train + sim.training(x.test=x.test)
}
for (i in 1:1000) {
set.seed(1)
x.test <- c(10,16)
sim.data.train <- sim.training(x.test=x.test)
}
pred <- poly.predict(degree.vec=1:5,
data=sim.data.train$data.train,
x.test=x.test)
pred
for (i in 1:1000) {
set.seed(1)
x.test <- c(10,16)
sim.data.train <- sim.training(x.test=x.test)
pred <- poly.predict(degree.vec=1:5,
data=sim.data.train$data.train,
x.test=x.test)
}
pred
for (i in 1:1000) {
set.seed(1)
x.test <- c(10,16)
sim.data.train <- sim.training(x.test=x.test)
pred <- poly.predict(degree.vec=1:5,
data=sim.data.train$data.train,
x.test=x.test)
mat.pred.1[,i] <- pred[1,]
mat.pred.2[,i] <- pred[2,]
y.test.mat <- sim.data.train$y.test
}
for (i in 1:1000) {
set.seed(1)
x.test <- c(10,16)
sim.data.train <- sim.training(x.test=x.test)
pred <- poly.predict(degree.vec=1:5,
data=sim.data.train$data.train,
x.test=x.test)
mat.pred.1[i,] <- pred[1,]
mat.pred.2[i,] <- pred[2,]
y.test.mat[i,] <- sim.data.train$y.test
}
true.f <- function(x) {
f.out <- (x-5)*(x-12)
return(f.out)
}
true.f(16)
sim.training <- function(x.test=c(16)
) {
# Hard-coded sample size and standard deviation
n <- 20
sd.error <- 20
# Training x vector
x <- seq(4,20,length=n)
# Simulate training Y based on f(x) and normal error
y <- true.f(x)+rnorm(n,sd=sd.error)
# Simulate test case
y.test <- true.f(x.test)+rnorm(length(x.test),sd=sd.error)
# Return a list of two entries:
# 1) the dataframe data.train
# 2) test respone vector y_0
return(list(data.train=data.frame(x=x,y=y),
y.test=y.test))
}
# Simulate data
set.seed(1)
x.test <- c(10,16)
sim.data.train <- sim.training(x.test=x.test)
head(sim.data.train$data.train,4)
sim.data.train$y.test
# Plot simulated data
x.plot <- seq(4,20,by=.01)
x <- sim.data.train$data.train$x
y <- sim.data.train$data.train$y
plot(x,y,main="Simulated Data")
# Plot f(x)
lines(x.plot,true.f(x.plot),lwd=2,col="red")
# Plot test cases
y.test <- sim.data.train$y.test
abline(v=x.test,col="grey")
points(x.test,y.test,pch=20,cex=1.5,col="blue")
# Legend
legend("topleft",legend=c("f(x)","Test cases"),fill=c("red","blue"),cex=.5)
predict.test.case <- function(degree,
data,
x.test) {
# Train model
model <- lm(y~poly(x,degree=degree),data=data)
# Predict test cases
y.test.hat <- predict(model,newdata=data.frame(x=x.test))
# Return y test case
return(y.test.hat)
}
x.plot <- seq(4,20,by=.01)
x.test <- c(10,16)
# Predict for degree=1
y.pred.1 <- predict.test.case(degree=1,
data=sim.data.train$data.train,
x.test=x.test)
y.plot.1 <- predict.test.case(degree=1,
data=sim.data.train$data.train,
x.test=x.plot)
# Predict for degree=2
y.pred.2 <- predict.test.case(degree=2,
data=sim.data.train$data.train,
x.test=x.test)
y.plot.2 <- predict.test.case(degree=2,
data=sim.data.train$data.train,
x.test=x.plot)
# Predict for degree=3
y.pred.3 <- predict.test.case(degree=3,
data=sim.data.train$data.train,
x.test=x.test)
y.plot.3 <- predict.test.case(degree=3,
data=sim.data.train$data.train,
x.test=x.plot)
# Plot simulated data
x <- sim.data.train$data.train$x
y <- sim.data.train$data.train$y
plot(x,y,main="Simulated Data")
abline(h=0,lty=2)
# Plot f(x)
lines(x.plot,true.f(x.plot),lwd=1.5,col="red")
# Plot the estimated curves
lines(x.plot,y.plot.1,lwd=1.5,col="green")
lines(x.plot,y.plot.2,lwd=1.5,col="purple")
lines(x.plot,y.plot.3,lwd=1.5,col="orange")
# Plot test cases
y.test <- sim.data.train$y.test
abline(v=x.test,col="grey")
points(x.test,y.test,pch=20,cex=1.5,col="blue")
# Plot estimated test cases
points(x.test,y.pred.1,pch=20,cex=1.5,col="green")
points(x.test,y.pred.2,pch=20,cex=1.5,col="purple")
points(x.test,y.pred.3,pch=20,cex=1.5,col="orange")
# Legend
legend("topleft",
legend=c("f(x)","Test Case","Degree 1","Degree 2","Degree 3"),
fill=c("red","blue","green","purple","orange"),
cex=.5)
poly.predict <- function(degree.vec,
data,
x.test) {
# Vectorize predict.test.case()
pred <- sapply(degree.vec,
predict.test.case,
data=data,
x.test=x.test)
# Name rows and columns
rownames(pred)  <- paste("TestCase",1:length(x.test),sep="")
colnames(pred)  <- paste("D",degree.vec,sep="")
# Return
return(pred)
}
# Test function poly.predict()
x.test <- c(10,16)
poly.predict(degree.vec=1:4,
data=sim.data.train$data.train,
x.test=x.test)
# Simulate data
for (i in 1:1000) {
set.seed(1)
x.test <- c(10,16)
sim.data.train <- sim.training(x.test=x.test)
pred <- poly.predict(degree.vec=1:5,
data=sim.data.train$data.train,
x.test=x.test)
mat.pred.1[i,] <- pred[1,]
mat.pred.2[i,] <- pred[2,]
y.test.mat[i,] <- sim.data.train$y.test
}
mat.pred.1
knitr::opts_chunk$set(echo = TRUE)
library(tm)
library(data.table)
library(tidytext)
library(tidyverse)
library(DT)
# load lyrics data
load('../data/lyrics.RData')
# function for removimg leading and trailing whitespace from character strings
leadingWhitespace <- content_transformer(function(x) str_trim(x, side = "both"))
# remove stop words
data("stop_words")
word <- c("lot", "today", "months", "month", "wanna", "wouldnt", "wasnt", "ha", "na", "ooh", "da",
"gonna", "im", "dont", "aint", "wont", "yeah", "la", "oi", "nigga", "fuck",
"hey", "year", "years", "last", "past", "feel")
stop_words <- c(stop_words$word, word)
# clean the data and make a corpus
corpus <- VCorpus(VectorSource(dt_lyrics$lyrics))%>%
tm_map(content_transformer(tolower))%>%
tm_map(removePunctuation)%>%
tm_map(removeWords, character(0))%>%
tm_map(removeWords, stop_words)%>%
tm_map(removeNumbers)%>%
tm_map(stripWhitespace)%>%
tm_map(leadingWhitespace)
# function for removimg leading and trailing whitespace from character strings
leadingWhitespace <- content_transformer(function(x) str_trim(x, side = "both"))
# remove stop words
data("stop_words")
word <- c("lot", "today", "months", "month", "wanna", "wouldnt", "wasnt", "ha", "na", "ooh", "da",
"gonna", "im", "dont", "aint", "wont", "yeah", "la", "oi", "nigga", "fuck",
"hey", "year", "years", "last", "past", "feel")
stop_words <- c(stop_words$word, word)
# clean the data and make a corpus
corpus <- VCorpus(VectorSource(dt_lyrics$lyrics))%>%
tm_map(content_transformer(tolower))%>%
tm_map(removePunctuation)%>%
tm_map(removeWords, character(0))%>%
tm_map(removeWords, stop_words)%>%
tm_map(removeNumbers)%>%
tm_map(stripWhitespace)%>%
tm_map(leadingWhitespace)
library(tm)
library(data.table)
library(tidytext)
library(tidyverse)
library(DT)
# load lyrics data
load('../data/lyrics.RData')
# function for removimg leading and trailing whitespace from character strings
leadingWhitespace <- content_transformer(function(x) str_trim(x, side = "both"))
# remove stop words
data("stop_words")
word <- c("lot", "today", "months", "month", "wanna", "wouldnt", "wasnt", "ha", "na", "ooh", "da",
"gonna", "im", "dont", "aint", "wont", "yeah", "la", "oi", "nigga", "fuck",
"hey", "year", "years", "last", "past", "feel")
stop_words <- c(stop_words$word, word)
# clean the data and make a corpus
corpus <- VCorpus(VectorSource(dt_lyrics$lyrics))%>%
tm_map(content_transformer(tolower))%>%
tm_map(removePunctuation)%>%
tm_map(removeWords, character(0))%>%
tm_map(removeWords, stop_words)%>%
tm_map(removeNumbers)%>%
tm_map(stripWhitespace)%>%
tm_map(leadingWhitespace)
knitr::opts_chunk$set(echo = TRUE)
library(tm)
library(data.table)
library(tidytext)
library(tidyverse)
library(DT)
# load lyrics data
load('../data/lyrics.RData')
# function for removimg leading and trailing whitespace from character strings
leadingWhitespace <- content_transformer(function(x) str_trim(x, side = "both"))
# remove stop words
data("stop_words")
word <- c("lot", "today", "months", "month", "wanna", "wouldnt", "wasnt", "ha", "na", "ooh", "da",
"gonna", "im", "dont", "aint", "wont", "yeah", "la", "oi", "nigga", "fuck",
"hey", "year", "years", "last", "past", "feel")
stop_words <- c(stop_words$word, word)
# clean the data and make a corpus
corpus <- VCorpus(VectorSource(dt_lyrics$lyrics))%>%
tm_map(content_transformer(tolower))%>%
tm_map(removePunctuation)%>%
tm_map(removeWords, character(0))%>%
tm_map(removeWords, stop_words)%>%
tm_map(removeNumbers)%>%
tm_map(stripWhitespace)%>%
tm_map(leadingWhitespace)
